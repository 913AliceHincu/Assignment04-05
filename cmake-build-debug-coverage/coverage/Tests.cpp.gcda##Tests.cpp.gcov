        -:    0:Source:/mnt/c/Users/Sakura/Documents/GitHub/FP/a45-913AliceHincu/Tests.cpp
        -:    0:Graph:/mnt/c/Users/Sakura/Documents/GitHub/FP/a45-913AliceHincu/cmake-build-debug-coverage/CMakeFiles/a45_913AliceHincu.dir/Tests.cpp.gcno
        -:    0:Data:/mnt/c/Users/Sakura/Documents/GitHub/FP/a45-913AliceHincu/cmake-build-debug-coverage/CMakeFiles/a45_913AliceHincu.dir/Tests.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Sakura on 3/30/2021.
        -:    3://
        -:    4:
        -:    5:#include <iostream>
        -:    6:#include <cassert>
        -:    7:#include "Tests.h"
        -:    8:#include "Dog.h"
        -:    9:#include "Service.h"
        -:   10:#include "Exceptions.h"
        -:   11:
        -:   12:
        1:   13:void Tests::runAllTests() {
        1:   14:    std::cout << "Starting tests...\n";
        1:   14-block  0
        1:   15:    this->run_domain_tests();
        1:   16:    this->run_validation_tests();
        1:   17:    this->runServiceTests();
        1:   18:    std::cout << "Finishing tests...\n";
        1:   19:}
        -:   20:
        1:   21:void Tests::runServiceTests() {
        1:   22:    std::cout << "Starting service admin tests...\n";
        1:   22-block  0
        -:   23:
        2:   24:    Repository repo;
        1:   24-block  0
    $$$$$:   24-block  1
        2:   25:    Service service(repo);
        1:   25-block  0
    $$$$$:   25-block  1
        -:   26:
        -:   27:    // add a dog function
        1:   28:    service.addDog("Hera", "Yorkshire Terrier", 6, "link");
        1:   28-block  0
        1:   28-block  1
        1:   28-block  2
        1:   28-block  3
        1:   28-block  4
    $$$$$:   28-block  5
    $$$$$:   28-block  6
    $$$$$:   28-block  7
    $$$$$:   28-block  8
    $$$$$:   28-block  9
    $$$$$:   28-block 10
    $$$$$:   28-block 11
    $$$$$:   28-block 12
    $$$$$:   28-block 13
    $$$$$:   28-block 14
    $$$$$:   28-block 15
    $$$$$:   28-block 16
        -:   29:    try {
       7*:   30:        service.addDog("Hera", "Yorkshire Terrier", 4, "link2");
        1:   30-block  0
        1:   30-block  1
        1:   30-block  2
    %%%%%:   30-block  3
        1:   30-block  4
        1:   30-block  5
        1:   30-block  6
        1:   30-block  7
        1:   30-block  8
        1:   30-block  9
        1:   30-block 10
        1:   30-block 11
        1:   30-block 12
        1:   30-block 13
        1:   30-block 14
        1:   30-block 15
    #####:   31:        assert(false);
        2:   32:    }catch(const Exceptions& serviceException){
        1:   32-block  0
        1:   32-block  1
    $$$$$:   32-block  2
        1:   33:        assert(serviceException.get_msg()=="Dog already exists!\n\n");
        1:   33-block  0
    $$$$$:   33-block  1
        -:   34:    }
        -:   35:
        -:   36:    // remove a dog function
        -:   37:    try {
        3:   38:        service.removeDog("laa");
        1:   38-block  0
        1:   38-block  1
    $$$$$:   38-block  2
        1:   38-block  3
        1:   38-block  4
        1:   38-block  5
        1:   38-block  6
    =====:   39:        assert(false);
        2:   40:    }catch(const Exceptions& serviceException){
        1:   40-block  0
        1:   40-block  1
    $$$$$:   40-block  2
        1:   41:        assert(serviceException.get_msg()=="Dog does not exist!\n\n");
        1:   41-block  0
    $$$$$:   41-block  1
        -:   42:    }
        1:   43:    service.removeDog("Hera");
        1:   43-block  0
        1:   43-block  1
        1:   43-block  2
    $$$$$:   43-block  3
    $$$$$:   43-block  4
    $$$$$:   43-block  5
    $$$$$:   43-block  6
        1:   44:    assert(service.getDogs().getSize() == 0);
        1:   44-block  0
    $$$$$:   44-block  1
        1:   44-block  2
        -:   45:
        -:   46:    // update a dog function
        1:   47:    service.addDog("Hera", "Yorkshire Terrier", 6, "link");
        1:   47-block  0
        1:   47-block  1
        1:   47-block  2
        1:   47-block  3
    $$$$$:   47-block  4
    $$$$$:   47-block  5
    $$$$$:   47-block  6
    $$$$$:   47-block  7
    $$$$$:   47-block  8
    $$$$$:   47-block  9
    $$$$$:   47-block 10
    $$$$$:   47-block 11
    $$$$$:   47-block 12
    $$$$$:   47-block 13
    $$$$$:   47-block 14
    $$$$$:   47-block 15
        -:   48:    try {
        7:   49:        service.updateDog("laa",  "Yorkshire Terrier", 6, "link");
        1:   49-block  0
        1:   49-block  1
        1:   49-block  2
    $$$$$:   49-block  3
        1:   49-block  4
        1:   49-block  5
        1:   49-block  6
        1:   49-block  7
        1:   49-block  8
        1:   49-block  9
        1:   49-block 10
        1:   49-block 11
        1:   49-block 12
        1:   49-block 13
        1:   49-block 14
        1:   49-block 15
    =====:   50:        assert(false);
        2:   51:    }catch(const Exceptions& serviceException){
        1:   51-block  0
        1:   51-block  1
    $$$$$:   51-block  2
        1:   52:        assert(serviceException.get_msg()=="Dog does not exist!\n\n");
        1:   52-block  0
    $$$$$:   52-block  1
        -:   53:    }
        1:   54:    service.updateDog("Hera", "blaa", 3, "link3");
        1:   54-block  0
        1:   54-block  1
        1:   54-block  2
        1:   54-block  3
        1:   54-block  4
    $$$$$:   54-block  5
    $$$$$:   54-block  6
    $$$$$:   54-block  7
    $$$$$:   54-block  8
    $$$$$:   54-block  9
    $$$$$:   54-block 10
    $$$$$:   54-block 11
    $$$$$:   54-block 12
    $$$$$:   54-block 13
    $$$$$:   54-block 14
    $$$$$:   54-block 15
    $$$$$:   54-block 16
        1:   55:    int age = service.getDogs().getCurrentElement().get_age();
        1:   55-block  0
        1:   55-block  1
        1:   55-block  2
    $$$$$:   55-block  3
    $$$$$:   55-block  4
    $$$$$:   55-block  5
    $$$$$:   55-block  6
        3:   56:    std::string breed = service.getDogs().getCurrentElement().get_breed();
        1:   56-block  0
        1:   56-block  1
        1:   56-block  2
    $$$$$:   56-block  3
    $$$$$:   56-block  4
    $$$$$:   56-block  5
        3:   57:    std::string photo = service.getDogs().getCurrentElement().get_photograph();
        1:   57-block  0
        1:   57-block  1
        1:   57-block  2
        1:   57-block  3
    $$$$$:   57-block  4
    $$$$$:   57-block  5
    $$$$$:   57-block  6
        1:   58:    assert(age == 3);
    $$$$$:   58-block  0
        1:   59:    assert(breed == "blaa");
        1:   59-block  0
    $$$$$:   59-block  1
        1:   60:    assert(photo == "link3");
        1:   60-block  0
    $$$$$:   60-block  1
        -:   61:
        1:   62:    std::cout << "Finishing service admin tests...\n";
        1:   62-block  0
        1:   63:}
        -:   64:
        1:   65:void Tests::run_domain_tests() {
        1:   66:    std::cout << "Starting domain tests...\n";
        1:   66-block  0
        -:   67:    // implicit constructor
        2:   68:    Dog d;
        1:   68-block  0
    $$$$$:   68-block  1
       1*:   69:    assert(d.get_name()=="");
        1:   69-block  0
        1:   69-block  1
    %%%%%:   69-block  2
       1*:   70:    assert(d.get_age()==-1);
        1:   70-block  0
        1:   70-block  1
    %%%%%:   70-block  2
       1*:   71:    assert(d.get_breed()=="");
        1:   71-block  0
        1:   71-block  1
    %%%%%:   71-block  2
       1*:   72:    assert(d.get_photograph()=="");
        1:   72-block  0
        1:   72-block  1
    %%%%%:   72-block  2
        -:   73:
        -:   74:    // explicit constructor
        3:   75:    Dog d1("Hera", "Yorkshire Terrier", 6, "link");
        1:   75-block  0
        1:   75-block  1
        1:   75-block  2
        1:   75-block  3
    $$$$$:   75-block  4
    $$$$$:   75-block  5
    $$$$$:   75-block  6
    $$$$$:   75-block  7
    $$$$$:   75-block  8
    $$$$$:   75-block  9
    $$$$$:   75-block 10
       1*:   76:    assert(d1.get_name()=="Hera");
        1:   76-block  0
    %%%%%:   76-block  1
       1*:   77:    assert(d1.get_breed()=="Yorkshire Terrier");
        1:   77-block  0
        1:   77-block  1
    %%%%%:   77-block  2
       1*:   78:    assert(d1.get_age()==6);
        1:   78-block  0
        1:   78-block  1
    %%%%%:   78-block  2
       1*:   79:    assert(d1.get_photograph()=="link");
        1:   79-block  0
        1:   79-block  1
    %%%%%:   79-block  2
        -:   80:
        -:   81:    // copy constructor;
        2:   82:    Dog d2{d1};
        1:   82-block  0
    $$$$$:   82-block  1
        1:   83:    d2.set_age(8);
        1:   83-block  0
        1:   84:    d2.set_photograph("link2");
        1:   84-block  0
        1:   84-block  1
        1:   84-block  2
    $$$$$:   84-block  3
    $$$$$:   84-block  4
    $$$$$:   84-block  5
    $$$$$:   84-block  6
       1*:   85:    assert(d2.get_age() == 8);
        1:   85-block  0
    %%%%%:   85-block  1
       1*:   86:    assert(d2.get_photograph() == "link2");
        1:   86-block  0
        1:   86-block  1
    %%%%%:   86-block  2
        -:   87:
        -:   88:    // check if d3 remains the same
        2:   89:    Dog d3 = d1;
        1:   89-block  0
    $$$$$:   89-block  1
        1:   90:    d1.set_age(3);
        1:   90-block  0
       1*:   91:    assert(d3.get_age() == 6);
        1:   91-block  0
        1:   91-block  1
    %%%%%:   91-block  2
        -:   92:
        -:   93:    // check = operator
        2:   94:    Dog d4;
        1:   94-block  0
        1:   94-block  1
    $$$$$:   94-block  2
        1:   95:    d4 = d3;
        1:   95-block  0
       1*:   96:    assert(d4.get_age() == 6);
        1:   96-block  0
        1:   96-block  1
    %%%%%:   96-block  2
        -:   97:
        -:   98:    // check == operator
       1*:   99:    assert(d4 == d3);
        1:   99-block  0
        1:   99-block  1
    %%%%%:   99-block  2
        -:  100:
        -:  101:    /*
        -:  102:    Dog d5;
        -:  103:    std::cin >> d5;
        -:  104:    std::cout << d5;
        -:  105:    */
        -:  106:
        1:  107:    std::cout << "Finishing domain tests...\n";
        1:  107-block  0
        1:  108:}
        -:  109:
        1:  110:void Tests::run_validation_tests() {
        -:  111:    /*
        -:  112:    std::cout << "Starting validation tests...\n";
        -:  113:    2, c{23, "Jaguar", 7869.5};
        -:  114:    CarValidator::validate(c);
        -:  115:
        -:  116:    Car c1{23, "", -7869.5};
        -:  117:    try {
        -:  118:        CarValidator::validate(c1);
        -:  119:        assert(false);
        -:  120:    }catch(const ValidationException& ve){
        -:  121:        assert(ve.get_msg()=="Invalid name!\nInvalid price!\n");
        -:  122:
        -:  123:    }
        -:  124:    std::cout << "Finishing validation tests...\n";
        -:  125:    */
        1:  126:}
