        -:    0:Source:/mnt/c/Users/Sakura/Documents/GitHub/FP/a45-913AliceHincu/Service.cpp
        -:    0:Graph:/mnt/c/Users/Sakura/Documents/GitHub/FP/a45-913AliceHincu/cmake-build-debug-coverage/CMakeFiles/a45_913AliceHincu.dir/Service.cpp.gcno
        -:    0:Data:/mnt/c/Users/Sakura/Documents/GitHub/FP/a45-913AliceHincu/cmake-build-debug-coverage/CMakeFiles/a45_913AliceHincu.dir/Service.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Sakura on 3/30/2021.
        -:    3://
        -:    4:
        -:    5:#include "Service.h"
        -:    6:#include "Exceptions.h"
        -:    7:
        1:    8:Service::Service(Repository& repo): _repo{repo} {}
        -:    9:
        3:   10:void Service::addDog(const std::string &name, const std::string &breed, int age, const std::string &photograph) {
        -:   11:    // create the dog
        6:   12:    Dog dog{name, breed, age, photograph};
        3:   12-block  0
        2:   12-block  1
        1:   12-block  2
        -:   13:
        -:   14:    // validate
        3:   15:    int numberOfDogs = this->_repo.getNumberOfDogs();
        3:   15-block  0
       3*:   16:    for (int i=0; i<numberOfDogs; i++) {
        3:   16-block  0
        3:   16-block  1
       2*:   17:        Dog existingDog = this->_repo.getCurrentElement();
        1:   17-block  0
    %%%%%:   17-block  1
        1:   17-block  2
        1:   18:        if (dog == existingDog) {
        1:   18-block  0
        1:   18-block  1
        1:   19:            throw Exceptions("Dog already exists!\n\n");
        1:   19-block  0
        1:   19-block  1
        1:   19-block  2
    $$$$$:   19-block  3
    $$$$$:   19-block  4
    $$$$$:   19-block  5
    $$$$$:   19-block  6
    $$$$$:   19-block  7
        -:   20:        }
        -:   21:    }
        -:   22:
        -:   23:    // add the dog
        2:   24:    this->_repo.addDogRepo(dog);
        2:   24-block  0
        -:   25:
        2:   26:}
        -:   27:
        -:   28:
        2:   29:void Service::removeDog(const std::string &name) {
        -:   30:    // validate
        2:   31:    int numberOfDogs = this->_repo.getNumberOfDogs();
        2:   31-block  0
        2:   32:    int position = -1;
        2:   33:    int isExisting = false;
        4:   34:    for (int i=0; i<numberOfDogs; i++) {
        4:   34-block  0
        4:   35:        Dog existingDog = this->_repo.getCurrentElement();
        2:   35-block  0
        2:   35-block  1
    $$$$$:   35-block  2
        2:   36:        if (name == existingDog.get_name()) {
        2:   36-block  0
        2:   36-block  1
        1:   37:            position = i;
        1:   38:            isExisting = true;
        1:   38-block  0
        -:   39:        }
        -:   40:    }
        -:   41:
        2:   42:    if (isExisting == false)
        2:   42-block  0
        1:   43:        throw Exceptions("Dog does not exist!\n\n");
        1:   43-block  0
        1:   43-block  1
        1:   43-block  2
    $$$$$:   43-block  3
    $$$$$:   43-block  4
    $$$$$:   43-block  5
    $$$$$:   43-block  6
    $$$$$:   43-block  7
        -:   44:
        -:   45:    // remove the dog
        1:   46:    this->_repo.removeDogRepo(position);
        1:   46-block  0
        1:   47:}
        -:   48:
        4:   49:DynamicArray<Dog> Service::getDogs() {
        4:   50:    return this->_repo.getDogsRepo();
        4:   50-block  0
        -:   51:
        -:   52:}
        -:   53:
        2:   54:void Service::updateDog(const std::string& name, const std::string& newBreed, int newAge, const std::string& newPhoto) {
        -:   55:    // validate
        2:   56:    int numberOfDogs = this->_repo.getNumberOfDogs();
        2:   56-block  0
        2:   57:    int position = -1;
        2:   58:    int isExisting = false;
        4:   59:    for (int i=0; i<numberOfDogs; i++) {
        2:   59-block  0
        4:   59-block  1
        4:   60:        Dog existingDog = this->_repo.getCurrentElement();
        2:   60-block  0
        2:   60-block  1
    $$$$$:   60-block  2
        2:   61:        if (name == existingDog.get_name()) {
        2:   61-block  0
        2:   61-block  1
        1:   62:            position = i;
        1:   63:            isExisting = true;
        1:   63-block  0
        -:   64:        }
        -:   65:    }
        -:   66:
        2:   67:    if (isExisting == false)
        2:   67-block  0
        1:   68:        throw Exceptions("Dog does not exist!\n\n");
        1:   68-block  0
        1:   68-block  1
        1:   68-block  2
    $$$$$:   68-block  3
    $$$$$:   68-block  4
    $$$$$:   68-block  5
    $$$$$:   68-block  6
    $$$$$:   68-block  7
        -:   69:
        -:   70:    // update the dog
        2:   71:    Dog dog{name, newBreed, newAge, newPhoto};
        1:   71-block  0
        1:   71-block  1
    $$$$$:   71-block  2
        1:   72:    this->_repo.updateDogRepo(dog, position);
        1:   72-block  0
        1:   73:}
        -:   74:
        -:   75:Service::~Service() = default;
