        -:    0:Source:/mnt/c/Users/Sakura/Documents/GitHub/FP/a45-913AliceHincu/DynamicArray.h
        -:    0:Graph:/mnt/c/Users/Sakura/Documents/GitHub/FP/a45-913AliceHincu/cmake-build-debug-coverage/CMakeFiles/a45_913AliceHincu.dir/Console.cpp.gcno
        -:    0:Data:/mnt/c/Users/Sakura/Documents/GitHub/FP/a45-913AliceHincu/cmake-build-debug-coverage/CMakeFiles/a45_913AliceHincu.dir/Console.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Sakura on 3/29/2021.
        -:    3://
        -:    4:
        -:    5:#ifndef A45_913ALICEHINCU_DYNAMICARRAY_H
        -:    6:#define A45_913ALICEHINCU_DYNAMICARRAY_H
        -:    7:
        -:    8:
        -:    9:#include <string>
        -:   10:#include <exception>
        -:   11:template <class TypeOfElement>
        -:   12:class DynamicArray {
        -:   13:
        -:   14:private:
        -:   15:    int capacity{};
        -:   16:    int size{};
        -:   17:    int currentElementIndex{}; // for iterating
        -:   18:
        -:   19:    TypeOfElement *elements;
        -:   20:    void resizeArray(int capacity);
        -:   21:
        -:   22:
        -:   23:public:
        -:   24:    DynamicArray();
        -:   25:    // explicit constructor
        -:   26:    explicit DynamicArray(int capacity = 10);
        -:   27:
        -:   28:    // copy constructor
        -:   29:    DynamicArray(const DynamicArray& copyArray);
        -:   30:
        -:   31:    // "=" overwrite
        -:   32:    DynamicArray& operator=(const DynamicArray& copyArray);
        -:   33:
        -:   34:    // add element at the end of container
        -:   35:    void addElement(TypeOfElement newElement);
        -:   36:
        -:   37:    // add element to a certain position
        -:   38:    void addElementToPosition(TypeOfElement newElement, int position);
        -:   39:
        -:   40:    // remove element from a certain position
        -:   41:    void removeElementFromPosition(int position);
        -:   42:
        -:   43:    // get the element from the container at the given position
        -:   44:    TypeOfElement getElement(int position);
        -:   45:
        -:   46:    // set the element from the container at the given position
        -:   47:    void setElement(TypeOfElement newElement, int position);
        -:   48:
        -:   49:    // get size of container
        -:   50:    [[nodiscard]] int getSize() const;
        -:   51:
        -:   52:    // for iterator:
        -:   53:    TypeOfElement getCurrentElement();
        -:   54:
        -:   55:    // change the current element for iterator
        -:   56:    void setCurrentElement(int);
        -:   57:
        -:   58:    // destructor
        -:   59:    ~DynamicArray();
        -:   60:
        -:   61:};
        -:   62:
        -:   63:
        -:   64://explicit constructor
        -:   65:template<class TypeOfElement>
        -:   66:DynamicArray<TypeOfElement>::DynamicArray(int capacity) {
        -:   67:    this->capacity = capacity;
        -:   68:    this->size = 0;
        -:   69:    this->elements = new TypeOfElement[this->capacity];
        -:   70:    this->currentElementIndex = 0;
        -:   71:}
        -:   72:
        -:   73://copy constructor
        -:   74:template<class TypeOfElement>
        -:   75:DynamicArray<TypeOfElement>::DynamicArray(const DynamicArray &copyArray) {
        -:   76:    size = copyArray.size;
        -:   77:    capacity = copyArray.capacity;
        -:   78:    elements = new TypeOfElement[capacity];
        -:   79:    for (int i = 0; i < size; ++i) {
        -:   80:        elements[i] = copyArray.elements[i];
        -:   81:    }
        -:   82:    currentElementIndex = copyArray.currentElementIndex;
        -:   83:}
        -:   84:
        -:   85:// =
        -:   86:template<class TypeOfElement>
        -:   87:DynamicArray<TypeOfElement>& DynamicArray<TypeOfElement>::operator=(const DynamicArray<TypeOfElement> &copyArray) {
        -:   88:    if (this == &copyArray) {
        -:   89:        return *this;
        -:   90:    }
        -:   91:    size = copyArray.size;
        -:   92:    capacity = copyArray.capacity;
        -:   93:
        -:   94:    delete [] elements;
        -:   95:    elements = new TypeOfElement[this->capacity];
        -:   96:    for (int i = 0; i < size; ++i) {
        -:   97:        elements[i] = copyArray.elements[i];
        -:   98:    }
        -:   99:    return *this;
        -:  100:}
        -:  101:
        -:  102:// add element at the end
        -:  103:template<class TypeOfElement>
        -:  104:void DynamicArray<TypeOfElement>::addElement(TypeOfElement newElement) {
        -:  105:    if (size == capacity) {
        -:  106:        resizeArray(2 * capacity);
        -:  107:    }
        -:  108:    elements[size++] = newElement;
        -:  109:}
        -:  110:
        -:  111:
        -:  112:// add element to a position
        -:  113:template<class TypeOfElement>
        -:  114:void DynamicArray<TypeOfElement>::addElementToPosition(TypeOfElement newElement, int position) {
        -:  115:    if (position > size or position < 0) {
        -:  116:        throw std::exception();
        -:  117:    }
        -:  118:    if (size == capacity) {
        -:  119:        resizeArray(2 * capacity);
        -:  120:    }
        -:  121:
        -:  122:    for (int i = size; i > position; ++i) {
        -:  123:        elements[i] = elements[i - 1];
        -:  124:    }
        -:  125:    size++;
        -:  126:    elements[position] = newElement;
        -:  127:}
        -:  128:
        -:  129:
        -:  130:template<class TypeOfElement>
        -:  131:void DynamicArray<TypeOfElement>::removeElementFromPosition(int position) {
        -:  132:    if (position >= size or position < 0) {
        -:  133:        throw std::exception();
        -:  134:    }
        -:  135:    if (size == capacity / 4) {
        -:  136:        resizeArray(capacity / 2);
        -:  137:    }
        -:  138:    size--;
        -:  139:    for (int i = position; i < size; ++i) {
        -:  140:        elements[i] = elements[i + 1];
        -:  141:    }
        -:  142:}
        -:  143:
        -:  144:
        -:  145:template <class TypeOfElement>
        8:  146:TypeOfElement DynamicArray<TypeOfElement>::getCurrentElement()  {
        8:  147:    if (currentElementIndex == size) {
        8:  147-block  0
        7:  148:        currentElementIndex = 0;
        7:  148-block  0
        -:  149:    }
        8:  150:    return elements[currentElementIndex++];
        8:  150-block  0
        -:  151:}
        -:  152:
        -:  153:
        -:  154:
        -:  155:template<class TypeOfElement>
        8:  156:int DynamicArray<TypeOfElement>::getSize() const {
        8:  157:    return size;
        8:  157-block  0
        -:  158:}
        -:  159:
        -:  160:
        -:  161:template<class TypeOfElement>
        -:  162:void DynamicArray<TypeOfElement>::setElement(TypeOfElement newElement, int position) {
        -:  163:    if (position >= size or position < 0) {
        -:  164:        throw std::exception();
        -:  165:    }
        -:  166:    elements[position] = newElement;
        -:  167:}
        -:  168:
        -:  169:template<class TypeOfElement>
        -:  170:TypeOfElement DynamicArray<TypeOfElement>::getElement(int position) {
        -:  171:    if (position >= size or position < 0) {
        -:  172:        throw std::exception();
        -:  173:    }
        -:  174:    return elements[position];
        -:  175:}
        -:  176:
        -:  177:
        -:  178:template<class TypeOfElement>
        -:  179:void DynamicArray<TypeOfElement>::resizeArray(int newCapacity) {
        -:  180:    capacity = newCapacity;
        -:  181:    auto * auxiliaryArray = new TypeOfElement[capacity];
        -:  182:    for (int i = 0; i < size; ++i) {
        -:  183:        auxiliaryArray[i] = elements[i];
        -:  184:    }
        -:  185:    delete [] elements;
        -:  186:    elements = auxiliaryArray;
        -:  187:}
        -:  188:
        -:  189:
        -:  190:template<class TypeOfElement>
        5:  191:DynamicArray<TypeOfElement>::~DynamicArray() {
       55:  192:    delete [] this->elements;
        5:  192-block  0
        5:  192-block  1
       55:  192-block  2
       50:  192-block  3
        5:  192-block  4
        5:  193:    this->size = 0;
        5:  194:}
        -:  195:
        -:  196:template<class TypeOfElement>
        -:  197:DynamicArray<TypeOfElement>::DynamicArray(): capacity{10}, size{0}, currentElementIndex{0} {
        -:  198:
        -:  199:}
        -:  200:
        -:  201:template<class TypeOfElement>
    #####:  202:void DynamicArray<TypeOfElement>::setCurrentElement(int nr) {
    #####:  203:    currentElementIndex = nr;
    #####:  204:}
        -:  205:
        -:  206:
        -:  207:#endif //A45_913ALICEHINCU_DYNAMICARRAY_H
